name: docker - ci

on:
    push:
        branches:
            - '*'
        tags:
            - 'v*'
    pull_request:
        
jobs:
    build-image:
        name: Build Docker Image
        runs-on: ubuntu-latest

        permissions:
            contents: read
            security-events: write
            packages: write
        
        steps:
            - 
                name: Checkout git repo
                uses: actions/checkout@v4
            # -
            #     name: create env file
            #     run: |
            #         touch .env
            #         echo DATABASE_URI=${{ secrets.DATABASE_URI }} >> .env
            #         echo DOCKERHUB_TOKEN=${{ secrets.DOCKERHUB_TOKEN }} >> .env
            #         echo DOCKERHUB_USERNAME=${{ secrets.DOCKERHUB_USERNAME }} >> .env
            #         echo NEXT_PUBLIC_MAPBOX_ACCESS_TOKEN=${{ secrets.NEXT_PUBLIC_MAPBOX_ACCESS_TOKEN }} >> .env
            #         echo PAYLOAD_SECRET=${{ secrets.PAYLOAD_SECRET }} >> .env
            #         echo NEXT_PRIVATE_DRAFT_SECRET=${{ vars.NEXT_PRIVATE_DRAFT_SECRET }} >> .env
            #         echo NEXT_PRIVATE_REVALIDATION_KEY=${{ vars.NEXT_PRIVATE_REVALIDATION_KEY }} >> .env
            #         echo NEXT_PUBLIC_SERVER_URL=${{ vars.NEXT_PUBLIC_SERVER_URL }} >> .env
            #         echo PAYLOAD_PUBLIC_DRAFT_SECRET=${{ vars.PAYLOAD_PUBLIC_DRAFT_SECRET }} >> .env
            #         echo PAYLOAD_PUBLIC_SERVER_URL=${{ vars.PAYLOAD_PUBLIC_SERVER_URL }} >> .env
            #         echo PORT=${{ vars.PORT }} >> .env
            #         echo REVALIDATION_KEY=${{ vars.REVALIDATION_KEY }} >> .env
            #         cat .env
            - 
                name: Downcase GITHUB_REPOSITORY
                run: |
                    echo "REPO=$GITHUB_REPOSITORY@L" >> "$GITHUB_ENV"
            -
                name: Set up QEMU
                uses: docker/setup-qemu-action@v3
            -
                name: Set up Docker Buildx
                uses: docker/setup-buildx-action@v3
            # -
            #     name: Login to Docker Hub
            #     uses: docker/login-action@v3
            #     with:
            #         username: ${{ secrets.DOCKERHUB_USERNAME }}
            #         password: ${{ secrets.DOCKERHUB_TOKEN }}
            - 
                name: Login to GitHub Container Registry
                uses: docker/login-action@v3
                with:
                    registry: ghcr.io
                    username: ${{ github.actor }}
                    password: ${{ secrets.PAT }}
            -
                name: Build and push
                uses: docker/build-push-action@v5
                with:
                    push: true
                    file: infra/docker/Dockerfile.prod
                    tags:  ghcr.io/${{ env.REPO }}:${{ github.run_id}}
                    cache-from: type=gha
                    cache-to: type=gha,mode=max
                    platforms: linux/amd64
                    context: .
                    secrets: |
                        "DATABASE_URI=${{ secrets.DATABASE_URI }}"
                        "DOCKERHUB_TOKEN=${{ secrets.DOCKERHUB_TOKEN }}"
                        "DOCKERHUB_USERNAME=${{ secrets.DOCKERHUB_USERNAME }}"
                        "NEXT_PUBLIC_MAPBOX_ACCESS_TOKEN=${{ secrets.NEXT_PUBLIC_MAPBOX_ACCESS_TOKEN }}"
                        "PAYLOAD_SECRET=${{ secrets.PAYLOAD_SECRET }}"
                        "NEXT_PRIVATE_DRAFT_SECRET=${{ secrets.NEXT_PRIVATE_DRAFT_SECRET }}"
                        "NEXT_PRIVATE_REVALIDATION_KEY=${{ secrets.NEXT_PRIVATE_REVALIDATION_KEY }}"
                        "NEXT_PUBLIC_SERVER_URL=${{ secrets.NEXT_PUBLIC_SERVER_URL }}"
                        "PAYLOAD_PUBLIC_DRAFT_SECRET=${{ secrets.PAYLOAD_PUBLIC_DRAFT_SECRET }}"
                        "PAYLOAD_PUBLIC_SERVER_URL=${{ secrets.PAYLOAD_PUBLIC_SERVER_URL }}"
                        "PORT=${{ secrets.PORT }}"
                        "REVALIDATION_KEY=${{ secrets.REVALIDATION_KEY }}"

    test-unit:
        name: Unit Tests in Docker
        needs: [build-image]
        runs-on: ubuntu-latest

        permissions:
            contents: read
            packages: read
        
        steps:
            - 
                name: Checkout git repo
                uses: actions/checkout@v4
            -
                name: Unit Testing in Docker
                run: |
                    docker run --rm ghcr.io/${{ env.REPO }}:${{ github.run_id }} echo "ls -a"

    test-integration:
        name: Integration Tests in Docker
        needs: [build-image]
        runs-on: ubuntu-latest

        permissions:
            packages: read
        
        steps:
            - 
                name: Checkout git repo
                uses: actions/checkout@v4
            -
                name: Test Healthcheck in Docker Compose
                run: |
                    export TESTING_IMAGE="ghcr.io/${{ env.REPO }}:${{ github.run_id }}"
                    export MONGODB_ADMINUSERNAME="${{ secrets.MONGODB_ADMINUSERNAME }}"
                    export MONGODB_ADMINPASSWORD="${{ secrets.MONGODB_ADMINPASSWORD }}"
                    docker compose -f docker-compose.test.yml up --exit-code-from sut

    scan-image:
        name: Scan Images for CVEs
        needs: [build-image]
        runs-on: ubuntu-latest

        permissions:
            packages: read
        
        steps:
            - 
                name: Checkout git repo
                uses: actions/checkout@v4
            -
                name: Login to Docker Hub
                uses: docker/login-action@v3
                with:
                    username: ${{ secrets.DOCKERHUB_USERNAME }}
                    password: ${{ secrets.DOCKERHUB_TOKEN }}
            -
                name: Pull Image to Scan
                run: docker pull ghcr.io/${{ env.REPO }}:${{ github.run_id }}
                
            -
                name: Run Trivy vulnerability scanner for all CVEs (non-blocking)
                uses: aquasecurity/trivy-action@master
                with:
                    image-ref: 'ghcr.io/${{ env.REPO }}:${{ github.run_id }}'
                    format: 'table'
                    exit-code: 0
            -
                name: Run Trivy for HIGH,CRITICAL CVEs and report (blocking)
                uses: aquasecurity/trivy-action@master
                with:
                    image-ref: 'ghcr.io/${{ env.REPO }}:${{ github.run_id }}'
                    exit-code: 1
                    ignore-unfixed: true
                    vuln-type: 'os,library'
                    severity: 'HIGH,CRITICAL'
                    format: 'sarif'
                    output: 'trivy-results.sarif'
            -
                name: Upload Trivy scan results to GitHub Security Tab
                uses: github/codeql-action/upload-sarif@v3
                if: always()
                with
                    # Path to SARIF file relative to the root of the repository
                    sarif_file: 'trivy-results.sarif'
                    
    build-final-image:
        name: Build Final Image
        needs: [test-unit, test-integration, scan-image]
        runs-on: ubuntu-latest

        permissions:
            packages: write
            pull-requests: write
            
        steps:
            - 
                name: Checkout git repo
                uses: actions/checkout@v4
            -
                name: Set up QEMU
                uses: docker/setup-qemu-action@v3
            -
                name: Set up Docker Buildx
                uses: docker/setup-buildx-action@v3
            -
                name: Login to Docker Hub
                uses: docker/login-action@v3
                with:
                    username: ${{ secrets.DOCKERHUB_USERNAME }}
                    password: ${{ secrets.DOCKERHUB_TOKEN }}
            -
                name: Docker meta
                id: docker_meta
                uses: docker/metadata-action@v5
                with:
                    images: harshakeerthan/sitatlas:latest
                    flavor: |
                        latest=false
                        tags: |
                        type=raw,value=04
                        type=raw,value=latest,enable=${{ endsWith(github.ref, github.event.repository.default_branch) }}
                        type=ref,event=pr
                        type=ref,event=branch
                        type=semver,pattern={{version}}
            -
                name: Build and push
                uses: docker/build-push-action@v5
                with:
                    push: true
                    load: true
                    tags: ${{ steps.docker_meta.outputs.tags }}
                    labels: ${{ steps.docker_meta.outputs.labels }}
                    cache-from: type=gha
                    cache-to: type=gha,mode=max
                    platforms: linux/amd64, linux/arm64, linux/arm/v8,
            - 
                name: Find Comment for image tags
                uses: peter-evans/find-comment@v2
                id: fc
                with:
                    issue-number: ${{ github.event.pull_request.number }}
                    comment-author: 'github-actions[bot]'
                    body-includes: Docker image tag(s) pushed
            - 
                name: Create or update comment
                uses: peter-evans/create-or-update-comment@v3
                with:
                    comment-id: ${{ steps.fc.outputs.comment-id }}
                    issue-number: ${{ github.event.pull_request.number }}
                    body: |
                        Docker image tag(s) pushed:
                        ```text
                        ${{ steps.docker_meta.outputs.tags }}
                        ```

                        Labels added to images:
                        ```text
                        ${{ steps.docker_meta.outputs.labels }}
                        ```
                    edit-mode: replace
                    
                    